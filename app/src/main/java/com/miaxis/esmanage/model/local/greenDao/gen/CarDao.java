package com.miaxis.esmanage.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.esmanage.entity.Car;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CAR".
*/
public class CarDao extends AbstractDao<Car, String> {

    public static final String TABLENAME = "CAR";

    /**
     * Properties of entity Car.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Integer.class, "id", false, "ID");
        public final static Property Carcode = new Property(1, String.class, "carcode", true, "CARCODE");
        public final static Property Plateno = new Property(2, String.class, "plateno", false, "PLATENO");
        public final static Property Compid = new Property(3, Integer.class, "compid", false, "COMPID");
        public final static Property Compname = new Property(4, String.class, "compname", false, "COMPNAME");
        public final static Property Opuser = new Property(5, String.class, "opuser", false, "OPUSER");
        public final static Property Opdate = new Property(6, String.class, "opdate", false, "OPDATE");
        public final static Property Remark = new Property(7, String.class, "remark", false, "REMARK");
        public final static Property Compno = new Property(8, String.class, "compno", false, "COMPNO");
        public final static Property Carphoto = new Property(9, String.class, "carphoto", false, "CARPHOTO");
        public final static Property Opusername = new Property(10, String.class, "opusername", false, "OPUSERNAME");
        public final static Property Rfid = new Property(11, String.class, "rfid", false, "RFID");
    }


    public CarDao(DaoConfig config) {
        super(config);
    }
    
    public CarDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CAR\" (" + //
                "\"ID\" INTEGER," + // 0: id
                "\"CARCODE\" TEXT PRIMARY KEY NOT NULL ," + // 1: carcode
                "\"PLATENO\" TEXT," + // 2: plateno
                "\"COMPID\" INTEGER," + // 3: compid
                "\"COMPNAME\" TEXT," + // 4: compname
                "\"OPUSER\" TEXT," + // 5: opuser
                "\"OPDATE\" TEXT," + // 6: opdate
                "\"REMARK\" TEXT," + // 7: remark
                "\"COMPNO\" TEXT," + // 8: compno
                "\"CARPHOTO\" TEXT," + // 9: carphoto
                "\"OPUSERNAME\" TEXT," + // 10: opusername
                "\"RFID\" TEXT);"); // 11: rfid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CAR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Car entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String carcode = entity.getCarcode();
        if (carcode != null) {
            stmt.bindString(2, carcode);
        }
 
        String plateno = entity.getPlateno();
        if (plateno != null) {
            stmt.bindString(3, plateno);
        }
 
        Integer compid = entity.getCompid();
        if (compid != null) {
            stmt.bindLong(4, compid);
        }
 
        String compname = entity.getCompname();
        if (compname != null) {
            stmt.bindString(5, compname);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(7, opdate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String compno = entity.getCompno();
        if (compno != null) {
            stmt.bindString(9, compno);
        }
 
        String carphoto = entity.getCarphoto();
        if (carphoto != null) {
            stmt.bindString(10, carphoto);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(11, opusername);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(12, rfid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Car entity) {
        stmt.clearBindings();
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String carcode = entity.getCarcode();
        if (carcode != null) {
            stmt.bindString(2, carcode);
        }
 
        String plateno = entity.getPlateno();
        if (plateno != null) {
            stmt.bindString(3, plateno);
        }
 
        Integer compid = entity.getCompid();
        if (compid != null) {
            stmt.bindLong(4, compid);
        }
 
        String compname = entity.getCompname();
        if (compname != null) {
            stmt.bindString(5, compname);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(7, opdate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(8, remark);
        }
 
        String compno = entity.getCompno();
        if (compno != null) {
            stmt.bindString(9, compno);
        }
 
        String carphoto = entity.getCarphoto();
        if (carphoto != null) {
            stmt.bindString(10, carphoto);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(11, opusername);
        }
 
        String rfid = entity.getRfid();
        if (rfid != null) {
            stmt.bindString(12, rfid);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public Car readEntity(Cursor cursor, int offset) {
        Car entity = new Car( //
            cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // carcode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // plateno
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // compid
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // compname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // opuser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // opdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // remark
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // compno
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // carphoto
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // opusername
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11) // rfid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Car entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getInt(offset + 0));
        entity.setCarcode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPlateno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setCompname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpuser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRemark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompno(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCarphoto(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOpusername(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setRfid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Car entity, long rowId) {
        return entity.getCarcode();
    }
    
    @Override
    public String getKey(Car entity) {
        if(entity != null) {
            return entity.getCarcode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Car entity) {
        return entity.getCarcode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
