package com.miaxis.esmanage.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.esmanage.entity.Company;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "COMPANY".
*/
public class CompanyDao extends AbstractDao<Company, String> {

    public static final String TABLENAME = "COMPANY";

    /**
     * Properties of entity Company.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, int.class, "id", false, "ID");
        public final static Property Compname = new Property(1, String.class, "compname", false, "COMPNAME");
        public final static Property Compcode = new Property(2, String.class, "compcode", true, "COMPCODE");
        public final static Property Compno = new Property(3, String.class, "compno", false, "COMPNO");
        public final static Property Phoneno = new Property(4, String.class, "phoneno", false, "PHONENO");
        public final static Property Opuser = new Property(5, String.class, "opuser", false, "OPUSER");
        public final static Property Opdate = new Property(6, String.class, "opdate", false, "OPDATE");
        public final static Property Compaddress = new Property(7, String.class, "compaddress", false, "COMPADDRESS");
        public final static Property Parentcode = new Property(8, String.class, "parentcode", false, "PARENTCODE");
        public final static Property Remark = new Property(9, String.class, "remark", false, "REMARK");
        public final static Property Opusername = new Property(10, String.class, "opusername", false, "OPUSERNAME");
        public final static Property SubCount = new Property(11, int.class, "subCount", false, "SUB_COUNT");
    }


    public CompanyDao(DaoConfig config) {
        super(config);
    }
    
    public CompanyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"COMPANY\" (" + //
                "\"ID\" INTEGER NOT NULL ," + // 0: id
                "\"COMPNAME\" TEXT," + // 1: compname
                "\"COMPCODE\" TEXT PRIMARY KEY NOT NULL ," + // 2: compcode
                "\"COMPNO\" TEXT," + // 3: compno
                "\"PHONENO\" TEXT," + // 4: phoneno
                "\"OPUSER\" TEXT," + // 5: opuser
                "\"OPDATE\" TEXT," + // 6: opdate
                "\"COMPADDRESS\" TEXT," + // 7: compaddress
                "\"PARENTCODE\" TEXT," + // 8: parentcode
                "\"REMARK\" TEXT," + // 9: remark
                "\"OPUSERNAME\" TEXT," + // 10: opusername
                "\"SUB_COUNT\" INTEGER NOT NULL );"); // 11: subCount
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"COMPANY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Company entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String compname = entity.getCompname();
        if (compname != null) {
            stmt.bindString(2, compname);
        }
 
        String compcode = entity.getCompcode();
        if (compcode != null) {
            stmt.bindString(3, compcode);
        }
 
        String compno = entity.getCompno();
        if (compno != null) {
            stmt.bindString(4, compno);
        }
 
        String phoneno = entity.getPhoneno();
        if (phoneno != null) {
            stmt.bindString(5, phoneno);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(7, opdate);
        }
 
        String compaddress = entity.getCompaddress();
        if (compaddress != null) {
            stmt.bindString(8, compaddress);
        }
 
        String parentcode = entity.getParentcode();
        if (parentcode != null) {
            stmt.bindString(9, parentcode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(11, opusername);
        }
        stmt.bindLong(12, entity.getSubCount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Company entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String compname = entity.getCompname();
        if (compname != null) {
            stmt.bindString(2, compname);
        }
 
        String compcode = entity.getCompcode();
        if (compcode != null) {
            stmt.bindString(3, compcode);
        }
 
        String compno = entity.getCompno();
        if (compno != null) {
            stmt.bindString(4, compno);
        }
 
        String phoneno = entity.getPhoneno();
        if (phoneno != null) {
            stmt.bindString(5, phoneno);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(6, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(7, opdate);
        }
 
        String compaddress = entity.getCompaddress();
        if (compaddress != null) {
            stmt.bindString(8, compaddress);
        }
 
        String parentcode = entity.getParentcode();
        if (parentcode != null) {
            stmt.bindString(9, parentcode);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(10, remark);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(11, opusername);
        }
        stmt.bindLong(12, entity.getSubCount());
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2);
    }    

    @Override
    public Company readEntity(Cursor cursor, int offset) {
        Company entity = new Company( //
            cursor.getInt(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // compname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // compcode
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // compno
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // phoneno
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // opuser
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // opdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // compaddress
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // parentcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // remark
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // opusername
            cursor.getInt(offset + 11) // subCount
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Company entity, int offset) {
        entity.setId(cursor.getInt(offset + 0));
        entity.setCompname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCompcode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCompno(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoneno(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOpuser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOpdate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCompaddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setParentcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRemark(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setOpusername(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSubCount(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Company entity, long rowId) {
        return entity.getCompcode();
    }
    
    @Override
    public String getKey(Company entity) {
        if(entity != null) {
            return entity.getCompcode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Company entity) {
        return entity.getCompcode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
