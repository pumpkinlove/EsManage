package com.miaxis.esmanage.model.local.greenDao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.miaxis.esmanage.entity.Escort;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ESCORT".
*/
public class EscortDao extends AbstractDao<Escort, String> {

    public static final String TABLENAME = "ESCORT";

    /**
     * Properties of entity Escort.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Finger0 = new Property(0, String.class, "finger0", false, "FINGER0");
        public final static Property Finger1 = new Property(1, String.class, "finger1", false, "FINGER1");
        public final static Property Id = new Property(2, Integer.class, "id", false, "ID");
        public final static Property Escode = new Property(3, String.class, "escode", true, "ESCODE");
        public final static Property Esname = new Property(4, String.class, "esname", false, "ESNAME");
        public final static Property Idcard = new Property(5, String.class, "idcard", false, "IDCARD");
        public final static Property Esstatus = new Property(6, Integer.class, "esstatus", false, "ESSTATUS");
        public final static Property Comno = new Property(7, String.class, "comno", false, "COMNO");
        public final static Property Compname = new Property(8, String.class, "compname", false, "COMPNAME");
        public final static Property Phoneno = new Property(9, String.class, "phoneno", false, "PHONENO");
        public final static Property PhotoUrl = new Property(10, String.class, "photoUrl", false, "PHOTO_URL");
        public final static Property Opuser = new Property(11, String.class, "opuser", false, "OPUSER");
        public final static Property Opdate = new Property(12, String.class, "opdate", false, "OPDATE");
        public final static Property Remark = new Property(13, String.class, "remark", false, "REMARK");
        public final static Property Comid = new Property(14, String.class, "comid", false, "COMID");
        public final static Property Opusername = new Property(15, String.class, "opusername", false, "OPUSERNAME");
        public final static Property IsCollect = new Property(16, String.class, "isCollect", false, "IS_COLLECT");
        public final static Property Password = new Property(17, String.class, "password", false, "PASSWORD");
    }


    public EscortDao(DaoConfig config) {
        super(config);
    }
    
    public EscortDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ESCORT\" (" + //
                "\"FINGER0\" TEXT," + // 0: finger0
                "\"FINGER1\" TEXT," + // 1: finger1
                "\"ID\" INTEGER," + // 2: id
                "\"ESCODE\" TEXT PRIMARY KEY NOT NULL ," + // 3: escode
                "\"ESNAME\" TEXT," + // 4: esname
                "\"IDCARD\" TEXT," + // 5: idcard
                "\"ESSTATUS\" INTEGER," + // 6: esstatus
                "\"COMNO\" TEXT," + // 7: comno
                "\"COMPNAME\" TEXT," + // 8: compname
                "\"PHONENO\" TEXT," + // 9: phoneno
                "\"PHOTO_URL\" TEXT," + // 10: photoUrl
                "\"OPUSER\" TEXT," + // 11: opuser
                "\"OPDATE\" TEXT," + // 12: opdate
                "\"REMARK\" TEXT," + // 13: remark
                "\"COMID\" TEXT," + // 14: comid
                "\"OPUSERNAME\" TEXT," + // 15: opusername
                "\"IS_COLLECT\" TEXT," + // 16: isCollect
                "\"PASSWORD\" TEXT);"); // 17: password
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ESCORT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Escort entity) {
        stmt.clearBindings();
 
        String finger0 = entity.getFinger0();
        if (finger0 != null) {
            stmt.bindString(1, finger0);
        }
 
        String finger1 = entity.getFinger1();
        if (finger1 != null) {
            stmt.bindString(2, finger1);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String escode = entity.getEscode();
        if (escode != null) {
            stmt.bindString(4, escode);
        }
 
        String esname = entity.getEsname();
        if (esname != null) {
            stmt.bindString(5, esname);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(6, idcard);
        }
 
        Integer esstatus = entity.getEsstatus();
        if (esstatus != null) {
            stmt.bindLong(7, esstatus);
        }
 
        String comno = entity.getComno();
        if (comno != null) {
            stmt.bindString(8, comno);
        }
 
        String compname = entity.getCompname();
        if (compname != null) {
            stmt.bindString(9, compname);
        }
 
        String phoneno = entity.getPhoneno();
        if (phoneno != null) {
            stmt.bindString(10, phoneno);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(11, photoUrl);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(12, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(13, opdate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String comid = entity.getComid();
        if (comid != null) {
            stmt.bindString(15, comid);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(16, opusername);
        }
 
        String isCollect = entity.getIsCollect();
        if (isCollect != null) {
            stmt.bindString(17, isCollect);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(18, password);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Escort entity) {
        stmt.clearBindings();
 
        String finger0 = entity.getFinger0();
        if (finger0 != null) {
            stmt.bindString(1, finger0);
        }
 
        String finger1 = entity.getFinger1();
        if (finger1 != null) {
            stmt.bindString(2, finger1);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(3, id);
        }
 
        String escode = entity.getEscode();
        if (escode != null) {
            stmt.bindString(4, escode);
        }
 
        String esname = entity.getEsname();
        if (esname != null) {
            stmt.bindString(5, esname);
        }
 
        String idcard = entity.getIdcard();
        if (idcard != null) {
            stmt.bindString(6, idcard);
        }
 
        Integer esstatus = entity.getEsstatus();
        if (esstatus != null) {
            stmt.bindLong(7, esstatus);
        }
 
        String comno = entity.getComno();
        if (comno != null) {
            stmt.bindString(8, comno);
        }
 
        String compname = entity.getCompname();
        if (compname != null) {
            stmt.bindString(9, compname);
        }
 
        String phoneno = entity.getPhoneno();
        if (phoneno != null) {
            stmt.bindString(10, phoneno);
        }
 
        String photoUrl = entity.getPhotoUrl();
        if (photoUrl != null) {
            stmt.bindString(11, photoUrl);
        }
 
        String opuser = entity.getOpuser();
        if (opuser != null) {
            stmt.bindString(12, opuser);
        }
 
        String opdate = entity.getOpdate();
        if (opdate != null) {
            stmt.bindString(13, opdate);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(14, remark);
        }
 
        String comid = entity.getComid();
        if (comid != null) {
            stmt.bindString(15, comid);
        }
 
        String opusername = entity.getOpusername();
        if (opusername != null) {
            stmt.bindString(16, opusername);
        }
 
        String isCollect = entity.getIsCollect();
        if (isCollect != null) {
            stmt.bindString(17, isCollect);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(18, password);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3);
    }    

    @Override
    public Escort readEntity(Cursor cursor, int offset) {
        Escort entity = new Escort( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // finger0
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // finger1
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // escode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // esname
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // idcard
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // esstatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // comno
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // compname
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // phoneno
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // photoUrl
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // opuser
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // opdate
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // remark
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // comid
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // opusername
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // isCollect
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17) // password
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Escort entity, int offset) {
        entity.setFinger0(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setFinger1(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEscode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEsname(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIdcard(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEsstatus(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setComno(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCompname(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPhoneno(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPhotoUrl(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setOpuser(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOpdate(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setRemark(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setComid(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOpusername(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsCollect(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setPassword(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Escort entity, long rowId) {
        return entity.getEscode();
    }
    
    @Override
    public String getKey(Escort entity) {
        if(entity != null) {
            return entity.getEscode();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Escort entity) {
        return entity.getEscode() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
